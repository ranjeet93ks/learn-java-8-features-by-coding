
------------------------->>>>>>>>>>>>>>>>>Java8-Questions&Answers ------------------------------>>>

>>Why Java 8 ?
  • Most popular and widely accepted language in the world.
  • Java creators wanted to introduce the Functional features such as:
     Lambdas
     Streams
     Optional and etc.,
  • Technological advancements with the mobile/laptops/systems.
  • New Java 8 features simplify the concurrency operations.

>>Functional Programming:
  • Embraces creating Immutable objects.
  • More concise and readable code.
  • Using functions/methods as first class citizens.
   Example:
       Function<String,String> addSomeString = (name) -> name.toUpperCase().concat("default");
  • Write code using Declarative approach.


>>Imperative vs Declarative Programming
   >Imperative Style of Programming
    • Focuses on how to perform the operations.
    • Embraces Object mutability.
    • This style of programming lists the step by step of instructions on how to achieve an objective.
    • We write the code on what needs to be done in each step.
    • Imperative style is used with classic Object Oriented Programming.
   >Declarative Style of Programming
    • Focuses on what is the result you want.
    • Embraces Object immutability.
    • Analogous to SQL (Structured Query Languague).
    • Use the functions that are already part of the library to achieve an objective.
    • Functional Programming uses the concept of declarative programming.

    ex.  sum of integers for the range from 0 to 100
	 > Imperative Style - how style of programming
	  int sum = 0;
		for (int i = 0; i <= 100; i++) {
			sum += i; // shared mutable state and its sequential and it will go step by step
			// and it will have issues if we try to run the code in multi threaded environment
		}
		System.out.println("Imperative Style -> Sum is : " + sum);
	>Declarative style. (Functional programming uses the same style) what style of
		 programming. You let the system do the job for you and get the result.
	  int sum1 = IntStream.rangeClosed(0, 100).sum();
		 System.out.println("Declarative style -> Sum is : " + sum1);
>>What is Lambda Expression?
   • Lambda is equivalent to a function (method) without a name.
   • Lambda’s are also referred as Anonymous functions.
      • Method parameters
      • Method Body
      • Return Type
   • Lambdas are not tied to any class like a regular method.
   • Lambda can also be assigned to variable and passed around.
     Lambda Expression:  ( ) -> { }

>>Usages of Lambda
  • Lambda is mainly used to implement Functional Interfaces(SAM).
     @FunctionalInterface
      public interface Comparator<T> {
      int compare(T o1, T o2);
      }
	( ) -> Single Statement or Expression; // curly braces are not needed.
    ( )-> { <Multiple Statements> }; // curly braces are needed for
       multiple //statements
ex.
   >Legacy:
    Runnable runnable = new Runnable() {
    @Override
    public void run() {
    System.out.println("Inside Runnable 1");
    }
    };
   >Java 8:
    Runnable runnableLambda = () -> {System.out.println("Inside Runnable 2");};
	
>>Functional Interfaces
   • Exists since Java 1.0
   • Definition: A Functional Interface(SAM) is an interface that has exactly one abstract method.    
   • @FunctionalInterface: This annotation is introduced as part of the JDK 1.8.
   • Optional annotation to signify an interface as Functional Interface.

>>New Functional Interfaces in Java8
   • Consumer – BiConsumer
   • Predicate - BiPredicate
   • Function – BiFunction, UnaryOperator, BinaryOperator
   • Supplier
>>New Functional Interfaces in Java8
   You can also define your own custom functional interface. 
    Following is the list of Predefined functional interface which are placed in java.util.function package :- 
      • BiConsumer<T,U>	:- It represents an operation that accepts two input arguments and returns no result.
      • Consumer<T>	:- It represents an operation that accepts a single argument and returns no result.
      • Function<T,R> :-It represents a function that accepts one argument and returns a result.
      • Predicate<T> :- It represents a predicate (boolean-valued function) of one argument.
      • BiFunction<T,U,R> :- It represents a function that accepts two arguments and returns a a result.
      • BinaryOperator<T> :- It represents an operation upon two operands of the same data type. It returns a result of the same type as the operands.
      • BiPredicate<T,U> :- It represents a predicate (boolean-valued function) of two arguments.
      • BooleanSupplier :- It represents a supplier of boolean-valued results.
      • DoubleBinaryOperator :- It represents an operation upon two double type operands and returns a double type value.
      • DoubleConsumer :- It represents an operation that accepts a single double type argument and returns no result.
      • DoubleFunction<R> :- It represents a function that accepts a double type argument and produces a result.
      • DoublePredicate :- It represents a predicate (boolean-valued function) of one double type argument.
      • DoubleSupplier :- It represents a supplier of double type results.
      • DoubleToIntFunction :- It represents a function that accepts a double type argument and produces an int type result.
      • DoubleToLongFunction :- It represents a function that accepts a double type argument and produces a long type result.
      • DoubleUnaryOperator :- It represents an operation on a single double type operand that produces a double type result.
      • IntBinaryOperator :- It represents an operation upon two int type operands and returns an int type result.
      • IntConsumer :- It represents an operation that accepts a single integer argument and returns no result.
      • IntFunction<R> :- It represents a function that accepts an integer argument and returns a result.
      • IntPredicate :- It represents a predicate (boolean-valued function) of one integer argument.
      • IntSupplier :- It represents a supplier of integer type.
      • IntToDoubleFunction :- It represents a function that accepts an integer argument and returns a double.
      • IntToLongFunction :- It represents a function that accepts an integer argument and returns a long.
      • IntUnaryOperator :- It represents an operation on a single integer operand that produces an integer result.
      • LongBinaryOperator :- It represents an operation upon two long type operands and returns a long type result.
      • LongConsumer :- It represents an operation that accepts a single long type argument and returns no result.
      • LongFunction<R> :- It represents a function that accepts a long type argument and returns a result.
      • LongPredicate :- It represents a predicate (boolean-valued function) of one long type argument.
      • LongSupplier :- It represents a supplier of long type results.
      • LongToDoubleFunction :- It represents a function that accepts a long type argument and returns a result of double type.
      • LongToIntFunction :- It represents a function that accepts a long type argument and returns an integer result.
      • LongUnaryOperator :- It represents an operation on a single long type operand that returns a long type result.
      • ObjDoubleConsumer<T> :- It represents an operation that accepts an object and a double argument, and returns no result.
      • ObjIntConsumer<T> :- It represents an operation that accepts an object and an integer argument. It does not return result.
      • ObjLongConsumer<T> :- It represents an operation that accepts an object and a long argument, it returns no result.
      • Supplier<T> :- It represents a supplier of results.
      • ToDoubleBiFunction<T,U> :- It represents a function that accepts two arguments and produces a double type result.
      • ToDoubleFunction<T> :- It represents a function that returns a double type result.
      • ToIntBiFunction<T,U> :- It represents a function that accepts two arguments and returns an integer.
      • ToIntFunction<T> :- It represents a function that returns an integer.
      • ToLongBiFunction<T,U> :- It represents a function that accepts two arguments and returns a result of long type.
      • ToLongFunction<T> :- It represents a function that returns a result of long type.
      • UnaryOperator<T> :- It represents an operation on a single operand that returnsa a result of the same type as its operand.

>>Method Reference
     • Introduced as part of Java 8 and its purpose is to simplify the implementation Functional Interfaces.
     • Shortcut for writing the Lambda Expressions.
     • Refer a method in a class.  
>>Constructor Reference
     • Introduced as part of Java 1.8
       Syntax: Classname::new
	   Example:
          Supplier<Student> studentSupplier = Student::new;
          Invalid:
          Student student = Student::new; // compilation issue
		  

Lambdas have some restrictions on using local variables:
• Not allowed to use the same the local variable name as
lambda parameters or inside the lambda body.
• Not allowed re-assign a value to a local variable.


Effectively Final
• Lambda’s are allowed to use local variables but not allowed to
modify it even though they are not declared final. This concept is
called Effectively Final.
• Not allowed to modify the value inside the lamda
int value =4;
Consumer<Integer> c1 = (a) -> {
//value=6; //reassigning not allowed
// System.out.println(i+value);
};
• Prior to Java 8 , any variable that’s used inside the anonymous
class should be declared final.

---------------------------
------------------------------
Introduction to Streams API:
• Introduced as part of Java8
• Main purpose is to perform some Operation on Collections.
• Parallel operations are easy to perform with Streams API without having to spawn a multiple threads.
• Streams API can be also used with arrays or any kind of I/O .

List<String> names = Arrays.asList("adam","dan","jenny");
Stream is a sequence of elements which can be created out of
a collections such as List or Arrays or any kind of I/O resources and etc.,
names.stream(); // creates a stream

Stream operations can be performed either sequentially or parallel.
names.parallelStream(); // creates a parallel stream






 




